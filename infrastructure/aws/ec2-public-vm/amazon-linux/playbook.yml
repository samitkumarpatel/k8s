---
- name: Prepare Amazon Linux for Kubernetes
  hosts: all
  become: yes
  tasks:
    - name: Disable swap
      ansible.builtin.command: swapoff -a
      register: swapoff_result
      changed_when: swapoff_result.rc == 0

    - name: Ensure swap is disabled in /etc/fstab
      ansible.builtin.lineinfile:
        path: /etc/fstab
        regexp: '^.*swap.*$'
        state: absent
    
    - name: Load kernel modules for containerd
      ansible.builtin.copy:
        content: |
          overlay
          br_netfilter
        dest: /etc/modules-load.d/containerd.conf
    
    - name: Load necessary kernel modules
      ansible.builtin.modprobe:
        name: "{{ item }}"
        state: present
      loop:
        - overlay
        - br_netfilter

    - name: Configure sysctl for Kubernetes
      ansible.builtin.copy:
        content: |
          net.bridge.bridge-nf-call-ip6tables = 1
          net.bridge.bridge-nf-call-iptables = 1
          net.ipv4.ip_forward = 1
        dest: /etc/sysctl.d/kubernetes.conf

    - name: Apply sysctl settings
      ansible.builtin.command: sysctl --system

    - name: Disable UFW
      ansible.builtin.command: ufw disable
      ignore_errors: yes

    - name: Remove conflicting packages
      ansible.builtin.apt:
        name:
          - containernetworking-plugins
          - conmon
        state: absent
    
    - name: Ensure the directory for keyrings exists
      ansible.builtin.file:
        path: /etc/apt/keyrings/
        state: directory
        mode: '0755'

    - name: Check if containerd is available
      ansible.builtin.stat:
        path: /usr/local/lib/systemd/system/containerd.service
      register: containerd_installation_status
    
    - block:
      - name: Download containerd archive
        ansible.builtin.get_url:
          url: https://github.com/containerd/containerd/releases/download/v2.0.0/containerd-2.0.0-linux-amd64.tar.gz
          dest: /tmp/containerd-2.0.0-linux-amd64.tar.gz
          mode: '0644'

      - name: Extract containerd to /usr/local
        ansible.builtin.unarchive:
          src: /tmp/containerd-2.0.0-linux-amd64.tar.gz
          dest: /usr/local
          remote_src: yes
      
      - name: Ensure the containerd.service base directory exists
        ansible.builtin.file:
          path: /usr/local/lib/systemd/system
          state: directory
          mode: '0755'

      - name: Configure containerd as a systemd service
        ansible.builtin.copy:
          dest: /usr/local/lib/systemd/system/containerd.service
          content: |
            [Unit]
            Description=containerd container runtime
            Documentation=https://containerd.io
            After=network.target local-fs.target dbus.service

            [Service]
            ExecStartPre=-/sbin/modprobe overlay
            ExecStart=/usr/local/bin/containerd
            Type=notify
            Delegate=yes
            KillMode=process
            Restart=always
            RestartSec=5

            LimitNPROC=infinity
            LimitCORE=infinity
            TasksMax=infinity
            OOMScoreAdjust=-999

            [Install]
            WantedBy=multi-user.target
          mode: '0644'

      - name: Reload systemd and enable containerd
        ansible.builtin.systemd:
          name: containerd
          enabled: yes
          state: started

      - name: Install runc
        ansible.builtin.shell: |
          wget https://github.com/opencontainers/runc/releases/download/v1.2.1/runc.amd64
          install -m 755 runc.amd64 /usr/local/sbin/runc

      - name: Install CNI plugins
        ansible.builtin.shell: |
          wget https://github.com/containernetworking/plugins/releases/download/v1.6.0/cni-plugins-linux-amd64-v1.6.0.tgz
          mkdir -p /opt/cni/bin
          tar -C /opt/cni/bin -xzvf cni-plugins-linux-amd64-v1.6.0.tgz

      - name: Restart containerd
        ansible.builtin.systemd:
          name: containerd
          state: restarted
      when: not containerd_installation_status.stat.exists
    
    - name: Check If kubernetes is already installed
      ansible.builtin.stat:
        path: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
      register: kkk_installation_status
    
    - block:
      - name: Download Kubernetes signing key
        ansible.builtin.get_url:
          url: https://pkgs.k8s.io/core:/stable:/v1.31/deb/Release.key
          dest: /etc/apt/keyrings

      - name: Dearmor the Kubernetes signing key
        ansible.builtin.shell: |
          gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg /etc/apt/keyrings/Release.key
        args:
          creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg

      - name: Add Kubernetes apt repository
        ansible.builtin.apt_repository:
          repo: 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /'
          state: present
          filename: kubernetes
          update_cache: yes

      - name: Install kubelet, kubeadm, and kubectl
        ansible.builtin.apt:
          name:
            - kubelet
            - kubeadm
            - kubectl
          state: present
          update_cache: yes

      - name: Hold kubelet, kubeadm, and kubectl packages
        ansible.builtin.command:
          cmd: sudo apt-mark hold kubelet kubeadm kubectl
      when: not kkk_installation_status.stat.exists

- name: Setup Control Plane Node
  hosts: manager
  become: true
  tasks:
    - name: Check if kubeadm has already initialized the control plane
      ansible.builtin.stat:
        path: /etc/kubernetes/admin.conf
      register: kubeadm_init_check
    
    - block:
      - name: Enable and start kubelet service
        ansible.builtin.systemd:
          name: kubelet
          enabled: true
          state: started
      
      - name: Debug kube_init_token_command
        ansible.builtin.debug:
          msg: |
            kubeadm init --pod-network-cidr=10.244.0.0/16 \
              --cri-socket unix:///run/containerd/containerd.sock \
              --ignore-preflight-errors=NumCPU \
              --apiserver-cert-extra-sans={{ ansible_ssh_host }}
      
      - name: Initialize Kubernetes control plane
        ansible.builtin.shell: |
          kubeadm init --pod-network-cidr=10.244.0.0/16 \
              --cri-socket unix:///run/containerd/containerd.sock \
              --ignore-preflight-errors=NumCPU \
              --apiserver-cert-extra-sans={{ ansible_ssh_host }}
        args:
          creates: /etc/kubernetes/admin.conf
      
      - name: Remove control plane taint
        ansible.builtin.shell: |
          kubectl taint nodes --all node-role.kubernetes.io/control-plane- || true

      - name: Install Flannel CNI
        ansible.builtin.shell: |
          kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml
        environment:
          KUBECONFIG: /etc/kubernetes/admin.conf
      when: not kubeadm_init_check.stat.exists

    - name: Ensure .kube directory exists for user
      ansible.builtin.file:
        path: /home/{{ ansible_user }}/.kube
        state: directory
        mode: '0755'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"

    - name: Copy kubeconfig to user directory
      ansible.builtin.shell: cp /etc/kubernetes/admin.conf /home/{{ ansible_user }}/.kube/config
      become: true

    - name: Set kubeconfig permissions
      ansible.builtin.file:
        path: /home/{{ ansible_user }}/.kube/config
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0600'

    - name: Get join command for worker nodes
      ansible.builtin.shell: kubeadm token create --print-join-command
      register: kube_join_command

    - name: Set join command into fact
      ansible.builtin.set_fact:
        kube_join_token_command: "{{ kube_join_command.stdout }}"

- name: Setup Worker Nodes
  hosts: worker
  become: true
  tags: worker
  tasks:
    - name: Check if worker node has already joined the cluster
      ansible.builtin.stat:
        path: /etc/kubernetes/kubelet.conf
      register: kubeadm_join_check

    - block:
      - name: Enable and start kubelet service
        ansible.builtin.systemd:
          name: kubelet
          enabled: true
          state: started
     
      - name: Debug kube_join_token_command
        ansible.builtin.debug:
          var: hostvars[groups['manager'][0]]['kube_join_token_command']
      
      - name: Join the Kubernetes cluster
        ansible.builtin.shell: "{{ hostvars[groups['manager'][0]]['kube_join_token_command'] }}"
        register: worker_join
        failed_when: "worker_join.rc != 0"
      when: not kubeadm_join_check.stat.exists