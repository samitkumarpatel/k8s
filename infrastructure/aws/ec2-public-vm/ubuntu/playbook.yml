---
- name: Install Containerd, runc, CNI, and Kubernetes
  hosts: all
  become: true
  vars:
    KUBERNETES_VERSION: "v1.31"
    CONTAINERD_VERSION: "2.0.0"
    RUNC_VERSION: "v1.2.2"
    CNI_VERSION: "v1.6.0"
    POD_NETWORK_CIDR: "10.244.0.0/16"
  tasks:
    - name: Install required packages
      ansible.builtin.apt:
        name:
          - software-properties-common
          - curl
        state: present
        update_cache: yes

    # Containerd installation
    - name: Download Containerd binary
      ansible.builtin.get_url:
        url: "https://github.com/containerd/containerd/releases/download/v{{ CONTAINERD_VERSION }}/containerd-{{ CONTAINERD_VERSION }}-linux-amd64.tar.gz"
        dest: "/tmp/containerd-{{ CONTAINERD_VERSION }}.tar.gz"

    - name: Extract Containerd binary
      ansible.builtin.unarchive:
        src: "/tmp/containerd-{{ CONTAINERD_VERSION }}.tar.gz"
        dest: /usr/local
        remote_src: yes

    - name: Create systemd directory for Containerd
      ansible.builtin.file:
        path: /usr/local/lib/systemd/system
        state: directory

    - name: Download Containerd service file
      ansible.builtin.get_url:
        url: "https://raw.githubusercontent.com/containerd/containerd/main/containerd.service"
        dest: /usr/local/lib/systemd/system/containerd.service

    - name: Reload systemd daemon
      ansible.builtin.systemd:
        daemon_reload: yes

    - name: Enable and start Containerd service
      ansible.builtin.systemd:
        name: containerd
        enabled: yes
        state: started

    # runc installation
    - name: Download runc binary
      ansible.builtin.get_url:
        url: "https://github.com/opencontainers/runc/releases/download/{{ RUNC_VERSION }}/runc.amd64"
        dest: /tmp/runc.amd64
        mode: '0755'

    - name: Install runc binary
      ansible.builtin.command:
        cmd: "install -m 755 /tmp/runc.amd64 /usr/local/sbin/runc"
        creates: /usr/local/sbin/runc

    # CNI installation
    - name: Download CNI plugins
      ansible.builtin.get_url:
        url: "https://github.com/containernetworking/plugins/releases/download/{{ CNI_VERSION }}/cni-plugins-linux-amd64-{{ CNI_VERSION }}.tgz"
        dest: "/tmp/cni-plugins-linux-amd64-{{ CNI_VERSION }}.tgz"

    - name: Create CNI directory
      ansible.builtin.file:
        path: /opt/cni/bin
        state: directory

    - name: Extract CNI plugins
      ansible.builtin.unarchive:
        src: "/tmp/cni-plugins-linux-amd64-{{ CNI_VERSION }}.tgz"
        dest: /opt/cni/bin
        remote_src: yes

    # Kubernetes installation
    - name: Add Kubernetes GPG key
      ansible.builtin.command:
        cmd: >
          curl -fsSL https://pkgs.k8s.io/core:/stable:/{{ KUBERNETES_VERSION }}/deb/Release.key |
          gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
      creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg

    - name: Add Kubernetes repository
      ansible.builtin.apt_repository:
        repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/{{ KUBERNETES_VERSION }}/deb/ /"
        filename: kubernetes
        state: present

    - name: Update Apt cache after adding repository
      ansible.builtin.apt:
        update_cache: yes

    - name: Install Kubernetes components
      ansible.builtin.apt:
        name:
          - kubelet
          - kubeadm
          - kubectl
        state: present

    # Kernel and networking configuration
    - name: Disable swap
      ansible.builtin.command:
        cmd: swapoff -a
      when: ansible_swaptotal_mb > 0

    - name: Disable UFW firewall
      ansible.builtin.ufw:
        state: disabled

    - name: Enable IP forwarding
      ansible.builtin.sysctl:
        name: net.ipv4.ip_forward
        value: "1"
        state: present

    - name: Load br_netfilter kernel module
      ansible.builtin.shell:
        cmd: modprobe br_netfilter
      args:
        creates: /sys/module/br_netfilter

    - name: Apply sysctl changes
      ansible.builtin.command:
        cmd: sysctl --system

- name: Setup Control Plane Node
  hosts: manager
  become: true
  tasks:
    - name: Check if kubeadm has already initialized the control plane
      ansible.builtin.stat:
        path: /etc/kubernetes/admin.conf
      register: kubeadm_init_check
    
    - block:
      - name: Kubeadm pull image
        ansible.builtin.command: kubeadm config images pull
      
      - name: Initialize Kubernetes control plane
        ansible.builtin.shell: |
          kubeadm init --pod-network-cidr={{ POD_NETWORK_CIDR }} --apiserver-cert-extra-sans={{ ansible_ssh_host }}
        args:
          creates: /etc/kubernetes/admin.conf
      
      - name: Remove control plane taint
        ansible.builtin.shell: |
          kubectl taint nodes --all node-role.kubernetes.io/control-plane- || true

      - name: Install Flannel CNI
        ansible.builtin.shell: |
          kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml
        environment:
          KUBECONFIG: /etc/kubernetes/admin.conf
      when: not kubeadm_init_check.stat.exists

    - name: Ensure .kube directory exists for user
      ansible.builtin.file:
        path: /home/{{ ansible_user }}/.kube
        state: directory
        mode: '0755'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"

    - name: Copy kubeconfig to user directory
      ansible.builtin.shell: cp /etc/kubernetes/admin.conf /home/{{ ansible_user }}/.kube/config
      become: true

    - name: Set kubeconfig permissions
      ansible.builtin.file:
        path: /home/{{ ansible_user }}/.kube/config
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0600'

    - name: Get join command for worker nodes
      ansible.builtin.shell: kubeadm token create --print-join-command
      register: kube_join_command

    - name: Set join command into fact
      ansible.builtin.set_fact:
        kube_join_token_command: "{{ kube_join_command.stdout }}"

- name: Setup Worker Nodes
  hosts: worker
  become: true
  tags: worker
  tasks:
    - name: Check if worker node has already joined the cluster
      ansible.builtin.stat:
        path: /etc/kubernetes/kubelet.conf
      register: kubeadm_join_check

    - block:
      - name: Enable and start kubelet service
        ansible.builtin.systemd:
          name: kubelet
          enabled: true
          state: started
     
      - name: Debug kube_join_token_command
        ansible.builtin.debug:
          var: hostvars[groups['manager'][0]]['kube_join_token_command']
      
      - name: Join the Kubernetes cluster
        ansible.builtin.shell: "{{ hostvars[groups['manager'][0]]['kube_join_token_command'] }}"
        register: worker_join
        failed_when: "worker_join.rc != 0"
      when: not kubeadm_join_check.stat.exists