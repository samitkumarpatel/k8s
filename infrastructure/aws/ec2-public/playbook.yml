---
- name: Prepare Amazon Linux for Kubernetes
  hosts: all
  become: yes
  tasks:
    - name: Disable swap
      ansible.builtin.command: swapoff -a
      register: swapoff_result
      changed_when: swapoff_result.rc == 0

    - name: Ensure swap is disabled in /etc/fstab
      ansible.builtin.replace:
        path: /etc/fstab
        regexp: '^(.+ swap .+)$'
        replace: '#\1'

    - name: Load necessary kernel modules
      ansible.builtin.modprobe:
        name: "{{ item }}"
        state: present
      loop:
        - overlay
        - br_netfilter

    - name: Configure sysctl for Kubernetes networking
      ansible.builtin.copy:
        dest: /etc/sysctl.d/k8s.conf
        content: |
          net.bridge.bridge-nf-call-ip6tables = 1
          net.bridge.bridge-nf-call-iptables = 1

    - name: Apply sysctl settings
      ansible.builtin.command: sysctl --system

    - name: Install containerd and Docker
      ansible.builtin.yum:
        name:
          - containerd
          - docker
        state: present

    - name: Enable and start Docker
      ansible.builtin.systemd:
        name: docker
        enabled: yes
        state: started

    - name: Set SELinux to permissive mode
      ansible.builtin.command: setenforce 0
      ignore_errors: yes

    - name: Update SELinux config to permissive
      ansible.builtin.replace:
        path: /etc/selinux/config
        regexp: '^SELINUX=enforcing'
        replace: 'SELINUX=permissive'

    - name: Configure Kubernetes repo
      ansible.builtin.copy:
        dest: /etc/yum.repos.d/kubernetes.repo
        content: |
          [kubernetes]
          name=Kubernetes
          baseurl=https://pkgs.k8s.io/core:/stable:/v1.31/rpm/
          enabled=1
          gpgcheck=1
          gpgkey=https://pkgs.k8s.io/core:/stable:/v1.31/rpm/repodata/repomd.xml.key
          exclude=kubelet kubeadm kubectl cri-tools kubernetes-cni

    - name: Install kubelet, kubeadm, and kubectl
      ansible.builtin.yum:
        name:
          - kubelet
          - kubeadm
          - kubectl
        state: present
        disable_excludes: kubernetes

    - name: Enable and start kubelet
      ansible.builtin.systemd:
        name: kubelet
        enabled: yes
        state: started

- name: Setup Control Plane Node
  hosts: manager
  become: true
  tasks:
    - name: Check if kubeadm has already initialized the control plane
      ansible.builtin.stat:
        path: /etc/kubernetes/admin.conf
      register: kubeadm_init_check

    - block:
      - name: Debug kube_init_token_command
        ansible.builtin.debug:
          msg: kubeadm init --pod-network-cidr=10.244.0.0/16 --apiserver-cert-extra-sans={{ ansible_ssh_host }}
      
      - name: Initialize Kubernetes control plane
        ansible.builtin.shell: |
          kubeadm init --pod-network-cidr=10.244.0.0/16 --apiserver-cert-extra-sans {{ ansible_ssh_host }}
        args:
          creates: /etc/kubernetes/admin.conf

      - name: Install Flannel CNI
        ansible.builtin.shell: kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml
        environment:
          KUBECONFIG: /etc/kubernetes/admin.conf
      when: not kubeadm_init_check.stat.exists

    - name: Ensure .kube directory exists for user
      ansible.builtin.file:
        path: /home/{{ ansible_user }}/.kube
        state: directory
        mode: '0755'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"

    - name: Copy kubeconfig to user directory
      ansible.builtin.shell: cp /etc/kubernetes/admin.conf /home/{{ ansible_user }}/.kube/config
      become: true

    - name: Set kubeconfig permissions
      ansible.builtin.file:
        path: /home/{{ ansible_user }}/.kube/config
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0600'

    - name: Get join command for worker nodes
      ansible.builtin.shell: kubeadm token create --print-join-command
      register: kube_join_command

    - name: Set join command into fact
      ansible.builtin.set_fact:
        kube_join_token_command: "{{ kube_join_command.stdout }}"

- name: Setup Worker Nodes
  hosts: worker
  become: true
  tags: worker
  tasks:
    - name: Check if worker node has already joined the cluster
      ansible.builtin.stat:
        path: /etc/kubernetes/kubelet.conf
      register: kubeadm_join_check

    - block:
      - name: Debug kube_join_token_command
        ansible.builtin.debug:
          var: hostvars[groups['manager'][0]]['kube_join_token_command']
      
      - name: Join the Kubernetes cluster
        ansible.builtin.shell: "{{ hostvars[groups['manager'][0]]['kube_join_token_command'] }}"
        register: worker_join
        failed_when: "worker_join.rc != 0"
      when: not kubeadm_join_check.stat.exists