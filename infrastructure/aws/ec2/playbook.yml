---
- name: Setup Kubernetes Cluster
  hosts: all
  become: true
  gather_facts: true
  tasks:
    - name: Disable firewall
      ansible.builtin.systemd:
        name: ufw
        state: stopped
        enabled: false

    - name: Disable swap
      ansible.builtin.shell: swapoff -a

    - name: Remove swap entry from fstab
      ansible.builtin.lineinfile:
        path: /etc/fstab
        regexp: '^(.*swap.*)'
        state: absent

    - name: Install necessary dependencies for Kubernetes
      ansible.builtin.apt:
        update_cache: yes
        state: present
        pkg:
        - apt-transport-https
        - ca-certificates
        - curl
        - software-properties-common
        - gpg
        - net-tools
    
    - name: Ensure the keyring directory exists on remote hosts
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Check docker gpg key is available
      ansible.builtin.stat:
        path: /etc/apt/keyrings/docker.asc
      register: docker_gpg_key_check

    - block:
      - name: Download Docker GPG key
        ansible.builtin.get_url:
          url: https://download.docker.com/linux/ubuntu/gpg
          dest: /etc/apt/keyrings/docker.asc
          mode: '0644'

      - name: Add Docker repository to apt sources
        ansible.builtin.apt_repository:
          repo: "deb [arch={{ ansible_architecture }} signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu {{ ansible_lsb.codename }} stable"
          filename: docker
          state: present
          update_cache: yes
      
      - name: Update apt package index
        ansible.builtin.apt:
          update_cache: yes
      
      - name: Install docker
        ansible.builtin.apt:
          update_cache: yes
          state: present
          pkg:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin

      - name: Add current user to the docker group
        ansible.builtin.user:
          name: "{{ ansible_user }}"
          groups: docker
          append: yes

      - name: Ensure Docker service is enabled and started
        ansible.builtin.systemd:
          name: docker
          enabled: yes
          state: started
      
      - name: Download cri-dockerd .deb package
        ansible.builtin.get_url:
          url: https://github.com/Mirantis/cri-dockerd/releases/download/v0.3.15/cri-dockerd_0.3.15.3-0.debian-bookworm_amd64.deb
          dest: /tmp/cri-dockerd.deb

      - name: Install cri-dockerd .deb package
        ansible.builtin.apt:
          deb: /tmp/cri-dockerd.deb
          state: present

      - name: Enable and start cri-dockerd service
        ansible.builtin.systemd:
          name: cri-docker
          state: started
          enabled: yes
      when: not docker_gpg_key_check.stat.exists
    
    - name: Check if kubernetes gpg key is available
      ansible.builtin.stat:
        path: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
      register: kubernetes_gpg_key_check

    - block:
      - name: Ensure the keyring directory exists on remote hosts
        ansible.builtin.file:
          path: /etc/apt/keyrings
          state: directory
          mode: '0755'

      - name: Download Kubernetes signing key
        ansible.builtin.get_url:
          url: https://pkgs.k8s.io/core:/stable:/v1.31/deb/Release.key
          dest: /etc/apt/keyrings

      - name: Dearmor the Kubernetes signing key
        ansible.builtin.shell: |
          gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg /etc/apt/keyrings/Release.key
        args:
          creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg

      - name: Add Kubernetes apt repository
        ansible.builtin.apt_repository:
          repo: 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /'
          state: present
          filename: kubernetes
          update_cache: yes
      when: not kubernetes_gpg_key_check.stat.exists

    - name: Update apt package index
      ansible.builtin.apt:
        update_cache: yes

    - name: Install Kubernetes components
      ansible.builtin.apt:
        update_cache: yes
        state: present
        pkg:
        - kubelet
        - kubeadm
        - kubectl

    - name: Enable and start kubelet service
      ansible.builtin.systemd:
        name: kubelet
        enabled: yes
        state: started
    
- name: Setup Control Plane Node
  hosts: manager
  become: true
  tasks:
    - name: Check if kubeadm has already initialized the control plane
      ansible.builtin.stat:
        path: /etc/kubernetes/admin.conf
      register: kubeadm_init_check

    - block:
      - name: Debug kube_init_token_command
        ansible.builtin.debug:
          msg: kubeadm init --pod-network-cidr=10.244.0.0/16 --apiserver-cert-extra-sans={{ ansible_ssh_host }} --cri-socket unix:///run/cri-dockerd.sock
      
      - name: Initialize Kubernetes control plane
        ansible.builtin.shell: |
          kubeadm init --pod-network-cidr=10.244.0.0/16 --apiserver-cert-extra-sans {{ ansible_ssh_host }} --cri-socket unix:///run/cri-dockerd.sock
        args:
          creates: /etc/kubernetes/admin.conf

      - name: Install Flannel CNI
        ansible.builtin.shell: kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml
        environment:
          KUBECONFIG: /etc/kubernetes/admin.conf
      when: not kubeadm_init_check.stat.exists

    - name: Ensure .kube directory exists for user
      ansible.builtin.file:
        path: /home/{{ ansible_user }}/.kube
        state: directory
        mode: '0755'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"

    - name: Copy kubeconfig to user directory
      ansible.builtin.shell: cp /etc/kubernetes/admin.conf /home/{{ ansible_user }}/.kube/config
      become: true

    - name: Set kubeconfig permissions
      ansible.builtin.file:
        path: /home/{{ ansible_user }}/.kube/config
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0600'

    - name: Get join command for worker nodes
      ansible.builtin.shell: kubeadm token create --print-join-command
      register: kube_join_command

    - name: Set join command into fact
      ansible.builtin.set_fact:
        kube_join_token_command: "{{ kube_join_command.stdout }}"

- name: Setup Worker Nodes
  hosts: worker
  become: true
  tags: worker
  tasks:
    - name: Check if worker node has already joined the cluster
      ansible.builtin.stat:
        path: /etc/kubernetes/kubelet.conf
      register: kubeadm_join_check

    - block:
      - name: Debug kube_join_token_command
        ansible.builtin.debug:
          var: hostvars[groups['manager'][0]]['kube_join_token_command']
      
      - name: Join the Kubernetes cluster
        ansible.builtin.shell: "{{ hostvars[groups['manager'][0]]['kube_join_token_command'] }}"
        register: worker_join
        failed_when: "worker_join.rc != 0"
      when: not kubeadm_join_check.stat.exists