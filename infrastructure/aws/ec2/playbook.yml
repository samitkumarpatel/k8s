---
- name: Download and prepare Kubernetes signing key locally
  hosts: localhost
  tags: local
  tasks:
    - name: Ensure local keyring directory exists
      ansible.builtin.file:
        path: ./keys
        state: directory
        mode: '0755'

    - name: Download Kubernetes signing key
      ansible.builtin.get_url:
        url: https://pkgs.k8s.io/core:/stable:/v1.31/deb/Release.key
        dest: ./keys/Release.key

    - name: Dearmor the Kubernetes signing key
      ansible.builtin.shell: |
        gpg --dearmor -o ./keys/kubernetes-apt-keyring.gpg ./keys/Release.key
      args:
        creates: ./keys/kubernetes-apt-keyring.gpg

- name: Setup Kubernetes Cluster
  hosts: all
  become: true
  gather_facts: true
  tasks:
    - name: Disable firewall
      ansible.builtin.systemd:
        name: ufw
        state: stopped
        enabled: false

    - name: Disable swap
      ansible.builtin.shell: swapoff -a

    - name: Remove swap entry from fstab
      ansible.builtin.lineinfile:
        path: /etc/fstab
        regexp: '^(.*swap.*)'
        state: absent

    - name: Install Kubernetes dependencies
      ansible.builtin.apt:
        update_cache: yes
        state: present
        pkg:
        - docker.io
        - apt-transport-https
        - ca-certificates
        - curl
        - software-properties-common
        - gpg
        - net-tools

    - name: Add user to the docker group
      ansible.builtin.user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes

    - name: Ensure Docker service is enabled and started
      ansible.builtin.systemd:
        name: docker
        enabled: yes
        state: started

    - name: Ensure the keyring directory exists on remote hosts
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Copy Kubernetes signing key to remote hosts
      ansible.builtin.copy:
        src: ./keys/kubernetes-apt-keyring.gpg
        dest: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
        mode: '0644'

    - name: Add Kubernetes apt repository
      ansible.builtin.apt_repository:
        repo: 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /'
        state: present
        filename: kubernetes
        update_cache: yes

    - name: Update apt package index
      ansible.builtin.apt:
        update_cache: yes

    - name: Install Kubernetes components
      ansible.builtin.apt:
        update_cache: yes
        state: present
        pkg:
        - kubelet
        - kubeadm
        - kubectl

    - name: Enable and start kubelet service
      ansible.builtin.systemd:
        name: kubelet
        enabled: yes
        state: started

- name: Setup Control Plane Node
  hosts: manager
  become: true
  tasks:
    - name: Debug kube_init_token_command
      ansible.builtin.debug:
        msg: kubeadm init --pod-network-cidr=10.244.0.0/16 --apiserver-cert-extra-sans={{ ansible_ssh_host }}
    
    - name: Initialize Kubernetes control plane
      ansible.builtin.shell: |
        kubeadm init --pod-network-cidr=10.244.0.0/16 --apiserver-cert-extra-sans {{ ansible_ssh_host }}
      args:
        creates: /etc/kubernetes/admin.conf

    - name: Install Flannel CNI
      ansible.builtin.shell: kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf

    - name: Ensure .kube directory exists for user
      ansible.builtin.file:
        path: /home/{{ ansible_user }}/.kube
        state: directory
        mode: '0755'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"

    - name: Copy kubeconfig to user directory
      ansible.builtin.shell: cp /etc/kubernetes/admin.conf /home/{{ ansible_user }}/.kube/config
      become: true

    - name: Set kubeconfig permissions
      ansible.builtin.file:
        path: /home/{{ ansible_user }}/.kube/config
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0600'

    - name: Get join command for worker nodes
      ansible.builtin.shell: kubeadm token create --print-join-command
      register: kube_join_command

    - name: Set join command fact
      ansible.builtin.set_fact:
        kube_join_token_command: "{{ kube_join_command.stdout }}"

    # - name: Generate a private key for samit
    #   community.crypto.openssl_privatekey:
    #     path: "samit.key"
    #     size: 2048
    #     type: RSA

    # - name: Generate a CSR for samit
    #   community.crypto.openssl_csr:
    #     path: "samit.csr"
    #     privatekey_path: "samit.key"
    #     subject: "/CN=samit"

    # - name: Sign the CSR with the CA to create a certificate for samit
    #   ansible.builtin.shell: 
    #     cmd: |
    #       openssl x509 -req -in samit.csr -CA /etc/kubernetes/pki/ca.crt -CAkey /etc/kubernetes/pki/ca.key -CAcreateserial -out samit.crt -days 30
    
    - name: Give access to user samit
      ansible.builtin.shell: kubectl create clusterrolebinding samit-admin-binding --clusterrole=cluster-admin --user=samit
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf

- name: Setup Worker Nodes
  hosts: worker
  become: true
  tags: worker
  tasks:
    - name: Debug kube_join_token_command
      ansible.builtin.debug:
        var: hostvars[groups['manager'][0]]['kube_join_token_command']
    
    - name: Join the Kubernetes cluster
      ansible.builtin.shell: "{{ hostvars[groups['manager'][0]]['kube_join_token_command'] }}"
      register: worker_join
      failed_when: "worker_join.rc != 0"
